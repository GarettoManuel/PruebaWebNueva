// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PruebaWebNueva.Infrastructure.Persistence;

#nullable disable

namespace PruebaWebNueva.Infrastructure.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250917191925_AddStockFieldsToProducto")]
    partial class AddStockFieldsToProducto
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.33")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("PruebaWebNueva.Domain.Entities.Permiso", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Accion")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Modulo")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Permisos");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Accion = "Leer",
                            Descripcion = "Ver listado de productos",
                            Modulo = "Productos",
                            Nombre = "ProductosLeer"
                        },
                        new
                        {
                            Id = 2,
                            Accion = "Crear",
                            Descripcion = "Crear nuevos productos",
                            Modulo = "Productos",
                            Nombre = "ProductosCrear"
                        },
                        new
                        {
                            Id = 3,
                            Accion = "Editar",
                            Descripcion = "Editar productos existentes",
                            Modulo = "Productos",
                            Nombre = "ProductosEditar"
                        },
                        new
                        {
                            Id = 4,
                            Accion = "Eliminar",
                            Descripcion = "Eliminar productos",
                            Modulo = "Productos",
                            Nombre = "ProductosEliminar"
                        },
                        new
                        {
                            Id = 5,
                            Accion = "Leer",
                            Descripcion = "Ver listado de clientes",
                            Modulo = "Clientes",
                            Nombre = "ClientesLeer"
                        },
                        new
                        {
                            Id = 6,
                            Accion = "Crear",
                            Descripcion = "Crear nuevos clientes",
                            Modulo = "Clientes",
                            Nombre = "ClientesCrear"
                        },
                        new
                        {
                            Id = 7,
                            Accion = "Editar",
                            Descripcion = "Editar clientes existentes",
                            Modulo = "Clientes",
                            Nombre = "ClientesEditar"
                        },
                        new
                        {
                            Id = 8,
                            Accion = "Eliminar",
                            Descripcion = "Eliminar clientes",
                            Modulo = "Clientes",
                            Nombre = "ClientesEliminar"
                        },
                        new
                        {
                            Id = 9,
                            Accion = "Leer",
                            Descripcion = "Ver inventario",
                            Modulo = "Stock",
                            Nombre = "StockLeer"
                        },
                        new
                        {
                            Id = 10,
                            Accion = "Editar",
                            Descripcion = "Modificar inventario",
                            Modulo = "Stock",
                            Nombre = "StockEditar"
                        },
                        new
                        {
                            Id = 11,
                            Accion = "Gestionar",
                            Descripcion = "Gestionar usuarios del sistema",
                            Modulo = "Usuarios",
                            Nombre = "UsuariosGestionar"
                        });
                });

            modelBuilder.Entity("PruebaWebNueva.Domain.Entities.Producto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CantidadStock")
                        .HasColumnType("int");

                    b.Property<string>("Categoria")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("CodigoBarras")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Descripcion")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("FechaUltimaActualizacion")
                        .HasColumnType("datetime2");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal>("Precio")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("StockMinimo")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Productos");
                });

            modelBuilder.Entity("PruebaWebNueva.Domain.Entities.Usuario", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("Activo")
                        .HasColumnType("bit");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("datetime2");

                    b.Property<string>("NombreCompleto")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("NombreUsuario")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("UltimoLogin")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("NombreUsuario")
                        .IsUnique();

                    b.ToTable("Usuarios");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Activo = true,
                            Email = "admin@sistema.com",
                            FechaCreacion = new DateTime(2025, 9, 17, 16, 19, 24, 765, DateTimeKind.Local).AddTicks(8553),
                            NombreCompleto = "Administrador del Sistema",
                            NombreUsuario = "administrador",
                            PasswordHash = "$2a$11$5WvKx2HmeyVmMJHevGakdOfIX7bAkNoBN0bwyU2YVOlwDIwUUP9O2"
                        });
                });

            modelBuilder.Entity("PruebaWebNueva.Domain.Entities.UsuarioPermiso", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("FechaAsignacion")
                        .HasColumnType("datetime2");

                    b.Property<int>("PermisoId")
                        .HasColumnType("int");

                    b.Property<int>("UsuarioId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PermisoId");

                    b.HasIndex("UsuarioId");

                    b.ToTable("UsuarioPermisos");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            FechaAsignacion = new DateTime(2025, 9, 17, 16, 19, 24, 765, DateTimeKind.Local).AddTicks(9216),
                            PermisoId = 1,
                            UsuarioId = 1
                        },
                        new
                        {
                            Id = 2,
                            FechaAsignacion = new DateTime(2025, 9, 17, 16, 19, 24, 765, DateTimeKind.Local).AddTicks(9220),
                            PermisoId = 2,
                            UsuarioId = 1
                        },
                        new
                        {
                            Id = 3,
                            FechaAsignacion = new DateTime(2025, 9, 17, 16, 19, 24, 765, DateTimeKind.Local).AddTicks(9221),
                            PermisoId = 3,
                            UsuarioId = 1
                        },
                        new
                        {
                            Id = 4,
                            FechaAsignacion = new DateTime(2025, 9, 17, 16, 19, 24, 765, DateTimeKind.Local).AddTicks(9223),
                            PermisoId = 4,
                            UsuarioId = 1
                        },
                        new
                        {
                            Id = 5,
                            FechaAsignacion = new DateTime(2025, 9, 17, 16, 19, 24, 765, DateTimeKind.Local).AddTicks(9224),
                            PermisoId = 5,
                            UsuarioId = 1
                        },
                        new
                        {
                            Id = 6,
                            FechaAsignacion = new DateTime(2025, 9, 17, 16, 19, 24, 765, DateTimeKind.Local).AddTicks(9225),
                            PermisoId = 6,
                            UsuarioId = 1
                        },
                        new
                        {
                            Id = 7,
                            FechaAsignacion = new DateTime(2025, 9, 17, 16, 19, 24, 765, DateTimeKind.Local).AddTicks(9226),
                            PermisoId = 7,
                            UsuarioId = 1
                        },
                        new
                        {
                            Id = 8,
                            FechaAsignacion = new DateTime(2025, 9, 17, 16, 19, 24, 765, DateTimeKind.Local).AddTicks(9228),
                            PermisoId = 8,
                            UsuarioId = 1
                        },
                        new
                        {
                            Id = 9,
                            FechaAsignacion = new DateTime(2025, 9, 17, 16, 19, 24, 765, DateTimeKind.Local).AddTicks(9229),
                            PermisoId = 9,
                            UsuarioId = 1
                        },
                        new
                        {
                            Id = 10,
                            FechaAsignacion = new DateTime(2025, 9, 17, 16, 19, 24, 765, DateTimeKind.Local).AddTicks(9230),
                            PermisoId = 10,
                            UsuarioId = 1
                        },
                        new
                        {
                            Id = 11,
                            FechaAsignacion = new DateTime(2025, 9, 17, 16, 19, 24, 765, DateTimeKind.Local).AddTicks(9231),
                            PermisoId = 11,
                            UsuarioId = 1
                        });
                });

            modelBuilder.Entity("PruebaWebNueva.Domain.Entities.UsuarioPermiso", b =>
                {
                    b.HasOne("PruebaWebNueva.Domain.Entities.Permiso", "Permiso")
                        .WithMany("UsuarioPermisos")
                        .HasForeignKey("PermisoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PruebaWebNueva.Domain.Entities.Usuario", "Usuario")
                        .WithMany("UsuarioPermisos")
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Permiso");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("PruebaWebNueva.Domain.Entities.Permiso", b =>
                {
                    b.Navigation("UsuarioPermisos");
                });

            modelBuilder.Entity("PruebaWebNueva.Domain.Entities.Usuario", b =>
                {
                    b.Navigation("UsuarioPermisos");
                });
#pragma warning restore 612, 618
        }
    }
}
