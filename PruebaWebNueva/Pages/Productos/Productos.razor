@page "/productos"
@using PruebaWebNueva.Domain.Entities
@inject PruebaWebNueva.Application.Services.IProductoService ProductoService
@inject PruebaWebNueva.Application.Services.IAuthService AuthService
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime

<ProtectedPageBase>

<div class="container-fluid">
    <div class="row">
        <div class="col-12">
            <div class="card shadow-sm">
                <div class="card-header d-flex justify-content-between align-items-center">
                    <h3 class="mb-0">
                        <i class="fas fa-boxes me-2"></i>
                        <span class="d-none d-sm-inline">Listado de Productos</span>
                        <span class="d-sm-none">Productos</span>
                    </h3>
                    <button class="btn btn-success btn-lg" @onclick="Crear">
                        <i class="fas fa-plus me-1"></i>
                        <span class="d-none d-sm-inline">Nuevo Producto</span>
                        <span class="d-sm-none">Nuevo</span>
                    </button>
                </div>
                <div class="card-body">
                    @if (productos == null)
                    {
                        <div class="text-center p-4">
                            <div class="spinner-border text-primary" role="status">
                                <span class="visually-hidden">Cargando...</span>
                            </div>
                            <p class="mt-2">Cargando productos...</p>
                        </div>
                    }
                    else if (!productos.Any())
                    {
                        <div class="text-center p-4">
                            <i class="fas fa-inbox fa-3x text-muted mb-3"></i>
                            <p class="text-muted">No hay productos disponibles.</p>
                        </div>
                    }
                    else
                    {
                        <!-- Tabla responsive -->
                        <div class="table-responsive">
                            <table class="table table-striped table-hover">
                                <thead class="table-dark">
                                    <tr>
                                        <th>ID</th>
                                        <th>Nombre</th>
                                        <th class="d-none d-lg-table-cell">Precio</th>
                                        <th class="text-center">Stock</th>
                                        <th class="d-none d-lg-table-cell">Descripción</th>
                                        <th class="text-center">Acciones</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var prod in productos)
                                    {
                                        <tr>
                                            <td class="align-middle">@prod.Id</td>
                                            <td class="align-middle fw-bold">@prod.Nombre</td>
                                            <td class="align-middle d-none d-lg-table-cell">
                                                <span class="badge bg-success fs-6">@prod.Precio.ToString("C")</span>
                                            </td>
                                            <td class="text-center align-middle">
                                                @{
                                                    var stockClass = prod.CantidadStock <= 0 ? "bg-danger" :
                                                    prod.CantidadStock <= prod.StockMinimo ? "bg-warning" : "bg-success";
                                                }
                                                <span class="badge @stockClass fs-6">@prod.CantidadStock</span>
                                            </td>
                                            <td class="align-middle d-none d-lg-table-cell">
                                                @(string.IsNullOrEmpty(prod.Descripcion) ? "-" : prod.Descripcion)
                                            </td>
                                            <td class="text-center align-middle">
                                                <!-- Botones responsive -->
                                                <div class="btn-group" role="group">
                                                    <!-- Botón Editar -->
                                                    <button class="btn btn-outline-primary btn-sm"
                                                            @onclick="() => Editar(prod.Id)"
                                                            title="Editar producto">
                                                        <i class="fas fa-edit"></i>
                                                        <span class="d-none d-xl-inline ms-1">Editar</span>
                                                    </button>
                                                    <!-- Botón Eliminar -->
                                                    <button class="btn btn-outline-danger btn-sm"
                                                            @onclick="() => Eliminar(prod.Id)"
                                                            title="Eliminar producto">
                                                        <i class="fas fa-trash"></i>
                                                        <span class="d-none d-xl-inline ms-1">Eliminar</span>
                                                    </button>
                                                </div>
                                                <!-- Info adicional visible solo en móvil -->
                                                <div class="d-lg-none mt-2">
                                                    <small class="text-muted d-block">Precio: @prod.Precio.ToString("C")</small>
                                                    @if (!string.IsNullOrEmpty(prod.Descripcion))
                                                    {
                                                        <small class="text-muted d-block">@prod.Descripcion</small>
                                                    }
                                                </div>
                                            </td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>
</div>

}
</ProtectedPageBase>

@code {
    private List<Producto>? productos;
    private Usuario? usuarioAutenticado;
    private Usuario? usuarioActual;

    protected override async Task OnInitializedAsync()
    {
        usuarioActual = await AuthService.GetUsuarioActualAsync();
        await CargarProductos();
    }

    private async Task CargarProductos()
    {
        productos = await ProductoService.GetAllAsync();
    }

    private void Crear()
    {
        NavigationManager.NavigateTo("/productos/crear");
    }

    private void Editar(int id)
    {
        NavigationManager.NavigateTo($"/productos/editar/{id}");
    }

    private async Task Eliminar(int id)
    {
        bool confirmado = await JSRuntime.InvokeAsync<bool>("confirm", "¿Estás seguro de eliminar este producto?");
        if (confirmado)
        {
            await ProductoService.DeleteAsync(id);
            await CargarProductos();
            await JSRuntime.InvokeVoidAsync("alert", "Producto eliminado exitosamente");
        }
    }
}